
extern int sstmac_global_stacksize; namespace ns {
 namespace ns2 {
  int x = 10;extern int __offset_x; void* __ptr_x = &x; int __sizeof_x = sizeof(x);static inline int* get_x(){  int stack; int* stackPtr = &stack;  uintptr_t localStorage = ((uintptr_t) stackPtr/sstmac_global_stacksize)*sstmac_global_stacksize;  char** globalMapPtr = (char**)(localStorage+sizeof(int));  char* offsetPtr = *globalMapPtr + __offset_x;return (((int*)((void*)offsetPtr))); }  
 }
}

extern int sstmac_global_stacksize; namespace ns {
int x = 10;extern int __offset_x; void* __ptr_x = &x; int __sizeof_x = sizeof(x);static inline int* get_x(){  int stack; int* stackPtr = &stack;  uintptr_t localStorage = ((uintptr_t) stackPtr/sstmac_global_stacksize)*sstmac_global_stacksize;  char** globalMapPtr = (char**)(localStorage+sizeof(int));  char* offsetPtr = *globalMapPtr + __offset_x;return (((int*)((void*)offsetPtr))); }  
}

void fxn()
{
  (*::ns::get_x()) += 5;
  (*::ns::ns2::get_x()) -= 3;
}
#include <sstmac/software/process/global.h>

namespace ns {
 int __offset_x = 0;
 extern int __sizeof_x;
 extern void* __ptr_x;
 sstmac::GlobalVariable __gv_x(__offset_x,__sizeof_x,__ptr_x);
 namespace ns2 {
  int __offset_x = 0;
  extern int __sizeof_x;
  extern void* __ptr_x;
  sstmac::GlobalVariable __gv_x(__offset_x,__sizeof_x,__ptr_x);
 }
}
